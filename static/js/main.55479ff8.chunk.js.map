{"version":3,"sources":["components/Navbar/Navbar.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","types/ColumnNames.ts","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeopleFilters/PeopleFilters.tsx","pages/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","HomePage","NotFoundPage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","PersonLink","person","useSearchParams","searchParams","pathname","slug","search","toString","sex","name","ColumnNames","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","PeopleTable","people","sort","order","personSlug","useParams","values","map","columnName","param","isSortColumn","isSortUp","isSortDown","normalizedColumnName","toUpperCase","slice","born","died","fatherName","motherName","mother","find","woman","father","man","sexColumns","All","Male","Female","centuriesValues","PeopleFilters","query","centuries","setSearchParams","type","placeholder","onChange","event","target","century","includes","filter","el","length","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","get","getAll","loadPeople","peopleData","useEffect","isShowErrorMessage","visiblePeople","String","Math","ceil","normalizedQuery","trim","toLowerCase","a","b","Name","localeCompare","Sex","Born","Died","reverse","getVisiblePeople","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.55479ff8.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item', { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export enum ColumnNames {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams;\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { ColumnNames } from '../../types/ColumnNames';\nimport { SearchLink } from '../SearchLink/SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\n\ntype Props = {\n  people: Person[];\n  sort: string;\n  order: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, sort, order }) => {\n  const { personSlug } = useParams();\n\n  const sortParams = (param: string) => {\n    if (sort !== param) {\n      return {\n        sort: param,\n        order: null,\n      };\n    }\n\n    if (sort === param && order !== 'desc') {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(ColumnNames).map((columnName) => {\n            const isSortColumn = sort === columnName;\n            const isSortUp = isSortColumn && order !== 'desc';\n            const isSortDown = isSortColumn && order === 'desc';\n\n            const normalizedColumnName\n              = columnName[0].toUpperCase() + columnName.slice(1);\n\n            return (\n              <th key={columnName}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {normalizedColumnName}\n\n                  <SearchLink params={sortParams(columnName) as SearchParams}>\n                    <span className=\"icon\">\n                      <i\n                        className={cn('fas', {\n                          'fa-sort': !isSortColumn,\n                          'fa-sort-up': isSortUp,\n                          'fa-sort-down': isSortDown,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => {\n          const {\n            sex, born, died, fatherName, motherName, slug,\n          } = person;\n          const mother = people.find((woman) => woman.name === motherName);\n\n          const father = people.find((man) => man.name === fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={cn({ 'has-background-warning': slug === personSlug })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {mother ? <PersonLink person={mother} /> : motherName || '-'}\n              </td>\n\n              <td>\n                {father ? <PersonLink person={father} /> : fatherName || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchLink } from '../SearchLink/SearchLink';\n\ntype Props = {\n  query: string;\n  sex: string;\n  centuries: string[];\n};\n\nconst sexColumns = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nconst centuriesValues = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC<Props> = ({ query, sex, centuries }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(sexColumns).map(([key, value]) => (\n          <SearchLink\n            key={value}\n            params={{\n              sex: value,\n            }}\n            className={cn({\n              'is-active': value === sex,\n            })}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter((el) => el !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            sex: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable/PeopleTable';\nimport { PeopleFilters } from '../components/PeopleFilters/PeopleFilters';\nimport { ColumnNames } from '../types/ColumnNames';\n\ninterface PeopleFilterOptions {\n  people: Person[];\n  sort: string;\n  order: string;\n  query: string;\n  sex: string;\n  centuries: Array<string>;\n}\n\nconst getVisiblePeople = ({\n  people,\n  sort,\n  order,\n  query,\n  sex,\n  centuries,\n}: PeopleFilterOptions) => {\n  let visiblePeople = [...people].map(person => ({\n    ...person,\n    century: String(Math.ceil(person.born / 100)),\n  }));\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    visiblePeople = visiblePeople.filter(\n      (person) => person.name.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(\n      (person) => person.sex === sex,\n    );\n  }\n\n  if (centuries.length > 0) {\n    visiblePeople = visiblePeople.filter(person => (\n      centuries.includes(person.century)\n    ));\n  }\n\n  if (sort) {\n    visiblePeople.sort((a, b) => {\n      switch (sort) {\n        case ColumnNames.Name:\n          return a.name.localeCompare(b.name);\n\n        case ColumnNames.Sex:\n          return a.sex.localeCompare(b.sex);\n\n        case ColumnNames.Born:\n          return a.born - b.born;\n\n        case ColumnNames.Died:\n          return a.died - b.died;\n\n        default:\n          return 0;\n      }\n    });\n\n    if (order === 'desc') {\n      visiblePeople.reverse();\n    }\n  }\n\n  return visiblePeople;\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const loadPeople = async () => {\n    try {\n      const peopleData = await getPeople();\n\n      setPeople(peopleData);\n    } catch (error) {\n      setErrorMessage('Something went wrong');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  const isShowErrorMessage = !isLoading && !errorMessage && people.length === 0;\n\n  const visiblePeople = getVisiblePeople({\n    people,\n    sort,\n    order,\n    query,\n    sex,\n    centuries,\n  });\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                query={query}\n                sex={sex}\n                centuries={centuries}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isShowErrorMessage && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {(visiblePeople.length === 0 && !isLoading) && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {visiblePeople.length > 0 && (\n                <PeopleTable\n                  people={visiblePeople}\n                  sort={sort}\n                  order={order}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { Navbar } from './components/Navbar/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/people\" element={<PeoplePage />} />\n            <Route path=\"/people/:personSlug\" element={<PeoplePage />} />\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}